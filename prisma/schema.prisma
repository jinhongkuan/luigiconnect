// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  googleId  String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  name      String
  avatar    String?
  Session   Session[]
  projectPosts  ProjectPost[]
  ownedProjects Project[] @relation("ProjectOwner")
  collaboratedProjects Project[] @relation("ProjectCollaborators")
  roleClaims CompanyRoleClaim[]
  comments Comment[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model ProjectPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  motivation String
  content String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  comments Comment[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectPosts ProjectPost[]
  ownerId String
  owner User @relation("ProjectOwner", fields: [ownerId], references: [id])
  collaborators User[] @relation("ProjectCollaborators")
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  roleClaims CompanyRoleClaim[]
  jobPostings JobPosting[]
  projectPosts ProjectPost[]
}

model CompanyRoleClaim {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  motivation String
  role      String
  upvotes   Int
  downvotes Int
  jobPostings JobPosting[]

}

enum JobPostingType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

model JobPosting {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poster    CompanyRoleClaim     @relation(fields: [posterId], references: [id])
  posterId  String
  posterRole String
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  title     String
  description String
  link String
  type JobPostingType
  location String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content String
  projectPostId String
  projectPost ProjectPost @relation(fields: [projectPostId], references: [id])
  upvotes   Int
}
